/* M */  char *Usage[] = {
/* a */  "-%                    Insert SISAL source line comments in the generated code",
/* c */  "-A<num>              *Set loop parallelization ``At'' level to <num>",
/* h */  "-C                    Stop after generating C code",
/* i */  "-CC=<path>            Use <path> as the C compiler",
/* n */  "-CPP                  Run the SISAL files through the C preprocessor and stop",
/* e */  "-D                   *Use DEBUG version of frontend",
/*   */  "-D<defn>              Define macro for C preprocessor",
/* G */  "-DI                  *Compile to DI stye IF1",
/* e */  "-FF=<path>            Use <path> as the FORTRAN compiler",
/* n */  "-I<num>              *Set assumed iteration count for loops",
/* e */  "-I<path>              Search <path> for C include files",
/* r */  "-IF1                  Compile to IF1 and stop",
/* a */  "-Keep                 Keep intermediate files instead of deleting them",
/* t */  "-L<num>              *Set nested parallelization threshold to <num>",
/* e */  "-Loopstyle=<stylechar> Set the default loop parallelism style to <stylechar>",
/* d */  "-MEM                 *Stop after memory allocation phase",
/*   */  "-MONO                 Stop after compiling and linking IF1 files",
/* D */  "-N<num>              *Set nested parallelization threshold to <num>",
/* o */  "-NoSliceThrottle      Turn off the slice throttle feature (MinSlice estimate)",
/*   */  "-O                    Use enabled optimizations",
/* N */  "-OPT                 *Stop after IF1 optimizations",
/* o */  "-P<num>              *Assume <num> processors are available for partitioning",
/* t */  "-PART                *Stop after partitioning phase",
/*   */  "-Prof                *Profile compiler execution",
/* C */  "-S                    Stop after generating assembly language",
/* h */  "-U<defn>              Undefine definition for C preprocessor",
/* a */  "-UP                  *Stop after update in place analysis",
/* n */  "-aggvector            Aggressively fuse independent vector loops",
/* g */  "-alliantfx           *Compile for Alliant architecture",
/* e */  "-avector             *Use Alliant style vectors",
/*   */  "-bind                 Array descriptor data will not change in calls to SISAL",
/* M */  "-bounds               Generate code to check for various errors",
/* a */  "-c <funct>            Consider <funct> available as a C external",
/* c */  "-call <funct>         Call <funct> instead of inlining",
/* h */  "-cc=<directive>       Supply <directive> to the C compiler",
/* i */  "-cinfo               *Get concurentization information",
/* n */  "-concur              *Generate concurrent code",
/* e */  "-copyinfo             Gather inforation on aggregate copying",
/*   */  "-cpp                  Run the C preprocessor on SISAL files",
/* G */  "-cray                 Cross compile for Cray",
/* e */  "-cvector             *Get vectorization information",
/* n */  "-cvinfo               Get vectorization and concurentization information",
/* e */  "-cvinfo=<rangelist>   Get more vectorization and concurentization information",
/* r */  "-d                    Debug mode",
/* a */  "-db <database>        Use <database> as inter-module data repository",
/* t */  "-dfuse               *Preform dependent loop fusion",
/* e */  "-double_real          Treat all SISAL real data as double_real data.",
/* d */  "-e <funct>            Use <funct> as main entry point",
/*   */  "-explode              Aggressively explode loops",
/* D */  "-explodeI             Aggressively explode innermost loops",
/* o */  "-f <funct>            Consider <funct> available as a FORTRAN external",
/*   */  "-ff=<directive>       Give <directive> to the local FORTRAN compiler",
/* N */  "-fflopinfo <funct>    Write floating point counts in <funct> to stderr",
/* o */  "-flopinfo             Write all floating point counts to s.info",
/* t */  "-forC                 Compile into a program callable by C",
/*   */  "-forFORTRAN           Compile into a program callable by FORTRAN",
/* C */  "-freeall             *Force release of all storage",
/* h */  "-fuse                *Perform loop fusion",
/* a */  "-glue                 Disable the optimization of non-inlined function calls",
/* n */  "-h<num>               Slice loops only if cost is greater than <num>",
/* g */  "-help                *Same as -usage",
/* e */  "-hybrid               Generate both C and FORTRAN code",
/*   */  "-i<num>               Set assumed iteration count for loops",
/* M */  "-icse                 Push identical operations out of conditionals",
/* a */  "-info                 Produce an information listing",
/* c */  "-info=<rangelist>     Get more information",
/* h */  "-inlineall            Inline all functions",
/* i */  "-inter                Interactively select functions for inlining",
/* n */  "-l<library>           Add a loader library",
/* e */  "-listing              Produce a root.lst file for each root.sis file",
/*   */  "-makeloopreport <file> Create a loop report showing the partitioner's decisions",
/* G */  "-maxconcur            Disable cost estimate.  Parallelize all eligible loops",
/* e */  "-module               Compile files into a callable module",
/* n */  "-movereads           *Move read operations (Cray)",
/* e */  "-n<num>               Consider only loops nested <num> deep for concurrency",
/* r */  "-nancy               *Do not use original Cray microtasking software",
/* a */  "-newchains           *Form Cray X-MP Chains",
/* t */  "-nltss               *Use NLTSS pragmas to generate vectors",
/* e */  "-noOinvar             Do not remove invariants from inner loops",
/* d */  "-noaimp              *Do not optimize array dereferences",
/*   */  "-noamove             *Do not apply anti-movement optimization (from compounds)",
/* D */  "-noassoc              Disable parallel reduction of associative operations",
/* o */  "-nobip               *Disable BIP",
/*   */  "-nobipmv             *Do not allow buffer movement in the C generator",
/* N */  "-nobounds             Do not generate code to check for various errors",
/* o */  "-nobrec              *Disable basic record optimization",
/* t */  "-nocagg              *Do not mark constant aggregates for static building",
/*   */  "-nochains            *Disable vector chaining",
/* C */  "-nocom               *Disable Sequent code improvement migration",
/* h */  "-noconcur             Disable concurrent processing",
/* a */  "-nocpp                Do not run the C preprocessor on SISAL files",
/* n */  "-nocse               *Disable common subr. eliminator",
/* g */  "-nodead              *No dead code removal in optimizer",
/* e */  "-nodfuse              Disable dependent loop fusion",
/*   */  "-nodope              *Do not apply dope vector optimizations",
/* M */  "-nofcopy             *Unknown?",
/* a */  "-nofiss              *Do not attempt record fission",
/* c */  "-nofold              *Do not attempt to fold constant values",
/* h */  "-nofuse               Disable all loop fusion",
/* i */  "-nogcse              *Do not attempt global common subr. elimination",
/* n */  "-noif1opt            *Turn off IF1 code improvers",
/* e */  "-noifuse              Disable independent loop fusion",
/*   */  "-noimp               *Set -nvnoopt loader option for the Crays",
/* G */  "-noimp                Compile with the C compiler's optimizers disabled",
/* e */  "-noinline             Do not inline functions",
/* n */  "-noinvar             *Disable invariant removal optimizer",
/* e */  "-noinvert            *Do not perform loop inversion optimization",
/* r */  "-noload               Do not create the executable, stop with a .o file",
/* a */  "-nomem                Disable build in place analysis",
/* t */  "-nomig               *Do not migrate operations toward users",
/* e */  "-nomovereads         *Move array read operations",
/* d */  "-nonormidx           *Do not normalize array indexing",
/*   */  "-noopt                Disable all optimization",
/* D */  "-nopreb               Disable array prebuilds",
/* o */  "-norag               *Generate code called by FORTRAN",
/*   */  "-noregs              *Do not assign register prefixes to generated C code",
/* N */  "-noscalar             Disable scalar optimizations",
/* o */  "-nosfuse             *Disable select fusion",
/* t */  "-nosplit             *Do not preform loop splitting",
/*   */  "-nostr               *Do not attempt to identify single threaded streams",
/* C */  "-nostrip             *Do not perform return node stripping",
/* h */  "-notgcse             *Do not force global common subr. elimination",
/* a */  "-nounroll             Disable loop unrolling",
/* n */  "-noup                 Disable update in place analysis",
/* g */  "-novector             Disable vectorization",
/* e */  "-nqs                  ...options  Submit as NQS batch job (Cray only)",
/*   */  "-o <absolute>         Name the executable <absolute> instead of s.out",
/* M */  "-oo <absolute>        Just like -o, but sisal extensions are legal.",
/* a */  "-p<num>               Assume <num> processors for partioning",
/* c */  "-patch=<num>          Apply a dynamic patch to one of the backend applications",
/* h */  "-pb<num>              Set array prebuild dimension to <num>",
/* i */  "-prof                *Generate a time execution profile of the compiler",
/* n */  "-progress            *Generate progress report in C code generation",
/* e */  "-real                 Treat all SISAL double_real data as real data.",
/*   */  "-sdbx                 Generate code to interface with the symbolic debugger",
/* G */  "-seq                  Compile for sequential execution",
/* e */  "-tgcse               *Force global Common Subr. Elimination",
/* n */  "-time <funct>         Generating timing code for this function",
/* e */  "-timeall              Generate timing code for all functions",
/* r */  "-tmpdir <dirname>     Put intermediate temp files in <dirname>",
/* a */  "-trace <funct>        Generating tracing code for this function",
/* t */  "-traceall             Generate tracing code for all functions",
/* e */  "-u<num>               Unroll loops with less than <num> iterations",
/* d */  "-usage                Produce this list",
/*   */  "-useloopreport <file> Use loopreport from a previous compilation",
/* D */  "-v                    Verbose mode",
/* o */  "-vector              *Enable vectorization",
/*   */  "-vinfo               *Produce vectorization information",
/* N */  "-vinfo<num>          *Produce more vectorization information",
/* o */  "-w                    Disable warning messages",
/* t */  "-xchains             *Allow vector chaining",
/*   */   NULL };
/* C */  static void PrintUsageTable(argv,idx)
/* h */  char *argv[]; int idx;
/* a */  {
/* n */    char **p,*q,*r,buf[128],lbuf[128],c;
/* g */    int len,cnt=0;
/* e */    if (argv[idx+1]) {
/*   */       while(argv[++idx]) {
/* M */         len=0;q=argv[idx];r=buf;
/* a */         while(*q) {len++; c= *q++; if (isupper(c)) c=tolower(c);*r++=c;};
/* c */         *r=NULL;
/* h */        for (p=Usage;*p;p++) {
/* i */          q= *p;r=lbuf;
/* n */          while(*q) {c= *q++; if (isupper(c)) c=tolower(c); *r++=c;};
/* e */           *r=NULL;
/*   */          for(q=lbuf;*q;q++) if (strncmp(q,buf,len)==0) { (void)puts(*p); cnt++; break; }
/* G */        }
/* e */      }
/* n */      if (!cnt) puts("No matches");
/* e */    } else {
/* r */      for (p=Usage;*p;p++) (void)puts(*p);
/* a */    }
/* t */    exit(1);
/* e */  }
